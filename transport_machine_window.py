# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'transport_machine_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import traceback
from settings import VERSION, root_logger, today
from db import fetch_active_customers, Copiers_Log, service_session
import sys
from PyQt5 import QtCore, QtGui, QtWidgets

sys.stderr.write = root_logger.error
sys.stdout.write = root_logger.info


class Ui_Transport_Machine_Window(QtWidgets.QWidget):
    window_closed = QtCore.pyqtSignal()  # Το Signal πρεπει να είναι εκτός __init__ δεν δουλευει αλλιως

    def __init__(self):
        super(Ui_Transport_Machine_Window, self).__init__()
        self.selected_machine = None
        self.active_customers = fetch_active_customers()
        self.customers_names = [customer.Επωνυμία_Επιχείρησης for customer in self.active_customers]
        self.customers_phones = [customer.Τηλέφωνο for customer in self.active_customers]
        self.customers_mobiles = [customer.Κινητό for customer in self.active_customers]
        self.customers_details = self.customers_names + self.customers_phones + self.customers_mobiles
        self.new_customer = None

    def setupUi(self, Transport_Machine_Window):
        Transport_Machine_Window.setObjectName("Form")
        Transport_Machine_Window.resize(602, 278)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/transport_copier.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Transport_Machine_Window.setWindowIcon(icon)
        self.gridLayout = QtWidgets.QGridLayout(Transport_Machine_Window)
        self.gridLayout.setObjectName("gridLayout")
        self.transport_machine_label = QtWidgets.QLabel(Transport_Machine_Window)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.transport_machine_label.setFont(font)
        self.transport_machine_label.setStyleSheet("background-color: rgb(170, 0, 0);\n"
"color: rgb(255, 255, 255);")
        self.transport_machine_label.setAlignment(QtCore.Qt.AlignCenter)
        self.transport_machine_label.setObjectName("transport_machine_label")
        self.gridLayout.addWidget(self.transport_machine_label, 0, 0, 1, 1)
        self.select_customer_label = QtWidgets.QLabel(Transport_Machine_Window)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.select_customer_label.sizePolicy().hasHeightForWidth())
        self.select_customer_label.setSizePolicy(sizePolicy)
        self.select_customer_label.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.select_customer_label.setFont(font)
        self.select_customer_label.setAlignment(QtCore.Qt.AlignCenter)
        self.select_customer_label.setObjectName("select_customer_label")
        self.gridLayout.addWidget(self.select_customer_label, 1, 0, 1, 1)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        # New customer combobox
        self.new_customer_lineEdit = QtWidgets.QLineEdit(Transport_Machine_Window)
        self.new_customer_lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.new_customer_lineEdit.setObjectName("new_customer_lineEdit")
        self.new_customer_lineEdit.setFont(font)
        self.customers_completer = QtWidgets.QCompleter(self.customers_details)
        self.customers_completer.popup().setFont(font)
        self.new_customer_lineEdit.setCompleter(self.customers_completer)

        self.new_customer_combobox = QtWidgets.QComboBox(Transport_Machine_Window)
        self.new_customer_combobox.setMinimumSize(QtCore.QSize(0, 30))
        self.new_customer_combobox.setFont(font)
        self.new_customer_combobox.setObjectName("new_customer_combobox")
        self.new_customer_combobox.setLineEdit(self.new_customer_lineEdit)
        self.new_customer_combobox.addItems(self.customers_names)
        self.gridLayout.addWidget(self.new_customer_combobox, 2, 0, 1, 1)
        self.copier_notes_label = QtWidgets.QLabel(Transport_Machine_Window)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(13)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.copier_notes_label.setFont(font)
        self.copier_notes_label.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.copier_notes_label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.copier_notes_label.setStyleSheet("background-color: rgb(89, 89, 89);\n"
"color: rgb(255, 255, 255);")
        self.copier_notes_label.setLocale(QtCore.QLocale(QtCore.QLocale.Greek, QtCore.QLocale.Greece))
        self.copier_notes_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.copier_notes_label.setAlignment(QtCore.Qt.AlignCenter)
        self.copier_notes_label.setObjectName("copier_notes_label")
        self.gridLayout.addWidget(self.copier_notes_label, 3, 0, 1, 1)
        self.copiers_notes_textEdit = QtWidgets.QTextEdit(Transport_Machine_Window)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(13)
        self.copiers_notes_textEdit.setFont(font)
        self.copiers_notes_textEdit.setObjectName("copiers_notes_textEdit")
        self.gridLayout.addWidget(self.copiers_notes_textEdit, 4, 0, 1, 1)
        self.transport_machine_toolButton = QtWidgets.QToolButton(Transport_Machine_Window)
        self.transport_machine_toolButton.setMinimumSize(QtCore.QSize(0, 50))
        self.transport_machine_toolButton.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.transport_machine_toolButton.setFont(font)
        self.transport_machine_toolButton.setStyleSheet("background-color: rgb(104, 104, 104);\n"
"color: rgb(255, 255, 255);")
        self.transport_machine_toolButton.setIcon(icon)
        self.transport_machine_toolButton.setIconSize(QtCore.QSize(40, 40))
        self.transport_machine_toolButton.setShortcut("Ctrl+S")
        self.transport_machine_toolButton.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.transport_machine_toolButton.setObjectName("transport_machine_toolButton")
        self.transport_machine_toolButton.clicked.connect(self.transport_machine)
        self.gridLayout.addWidget(self.transport_machine_toolButton, 5, 0, 1, 1, QtCore.Qt.AlignHCenter)

        self.retranslateUi(Transport_Machine_Window)
        QtCore.QMetaObject.connectSlotsByName(Transport_Machine_Window)

    def retranslateUi(self, Transport_Machine_Window):
        _translate = QtCore.QCoreApplication.translate
        Transport_Machine_Window.setWindowTitle(_translate("Transport_Machine_Window", f"Μεταφορά μηχανήματος {VERSION}"))
        self.transport_machine_label.setText(_translate("Transport_Machine_Window", "Μεταφορά σε νέο πελάτη"))
        self.select_customer_label.setText(_translate("Transport_Machine_Window", "Επιλογή νέου πελάτη"))
        self.copier_notes_label.setText(_translate("Transport_Machine_Window", "Αιτία μεταφοράς"))
        self.transport_machine_toolButton.setText(_translate("Transport_Machine_Window", "  Μεταφορά"))

    def transport_machine(self):
        """
        Αποθύκευση μεταφοράς μηχανήματος σε νέο πελάτη
        Ελεγχος αν έχουμε επιλέξει μηχάνημα
        Ελεγχος αν το εμφανιζόμενο όνομα στο self.new_customer_lineEdit ειναι στην λίστα ονομάτων ενεργών πελατών
        Καταγραφή μεταφοράς στο Copiers_Log
            Καλείτε
                οταν πατάμε το κουμπί "Μεταφορά" self.transport_machine_toolButton.clicked
        :return:
        """
        if not self.selected_machine:
            QtWidgets.QMessageBox.critical(None, "Σφάλμα",
                                           f"Δεν έχετε επιλέξει μηχάνημα!")
            self.close()
            return
        else:
            if self.new_customer_lineEdit.text() not in self.customers_names:
                self.new_customer_lineEdit.setStyleSheet("background-color: red;" "color: white;")
                return
            else:
                self.new_customer_lineEdit.setStyleSheet("background-color: green;" "color: white;")
                new_customer_index = self.customers_names.index(self.new_customer_lineEdit.text())
                self.new_customer = self.active_customers[new_customer_index]
                self.new_customer_lineEdit.setText(self.new_customer.Επωνυμία_Επιχείρησης)
                answer = QtWidgets.QMessageBox.question(None, 'Προσοχή', f"Σίγουρα θέλετε να μεταφέρετε το\n"
                                                                         f"{self.selected_machine.Εταιρεία}\n"
                                                                         f" στον πελάτη {self.new_customer.Επωνυμία_Επιχείρησης};",
                                                        QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                                                        QtWidgets.QMessageBox.No)
                if answer == QtWidgets.QMessageBox.Yes:
                    try:
                        self.selected_machine.Πελάτη_ID = self.new_customer.ID
                        # Καταγραφή μεταφοράς στο Copiers_Log
                        new_transfer_log = Copiers_Log(ID_μηχανήματος=self.selected_machine.ID,
                                                       Μηχάνημα=self.selected_machine.Εταιρεία,
                                                       Ημερομηνία=today.replace(" ", "/"),
                                                       Προηγούμενος_Πελάτης=self.selected_machine.Customer.Επωνυμία_Επιχείρησης,
                                                       Νέος_Πελάτης=self.new_customer.Επωνυμία_Επιχείρησης,
                                                       Σημειώσεις=self.copiers_notes_textEdit.toPlainText())
                        old_comments = self.selected_machine.Σημειώσεις
                        self.selected_machine.Σημειώσεις = old_comments + f"\n--- {today.replace(' ', '/')} --- " \
                                                                          f"Μεταφορά απο πελάτή {self.selected_machine.Customer.Επωνυμία_Επιχείρησης}" \
                                                                          f" στον πελάτη {self.new_customer.Επωνυμία_Επιχείρησης}" \
                                                                          f"\nΑιτία μεταφοράς: {self.copiers_notes_textEdit.toPlainText()}"
                        service_session.add(new_transfer_log)
                        service_session.commit()
                        QtWidgets.QMessageBox.information(None, "Πληροφορία", "Το μηχάνημα μεταφέρθηκε επιτυχώς!")
                        self.close()
                    except Exception:
                        traceback.print_exc()
                        QtWidgets.QMessageBox.critical(None, "Σφάλμα",
                                                       f"Κάτι δεν πήγε καλα!\nΟι αλλαγές δεν αποθήκευτηκαν!")
                        return

    def closeEvent(self, event):
        self.window_closed.emit()
        event.accept()
        # event.ignore()  # if you want the window to never be closed


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle("Fusion")
    Transport_Machine_Window = QtWidgets.QWidget()
    ui = Ui_Transport_Machine_Window()
    ui.setupUi(Transport_Machine_Window)
    Transport_Machine_Window.show()
    sys.exit(app.exec_())
